selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   
   #Mask pt < 0.1
   part_mask: fjet_clus_pt<0.1
   
   ### Kinematic variables
   part_px: fjet_clus_pt*np.cos(fjet_clus_phi)
   part_py: fjet_clus_pt*np.sin(fjet_clus_phi)
   part_pz: fjet_clus_pt*np.sinh(fjet_clus_eta)
   part_pt: fjet_clus_pt
   part_pt_log: np.log(fjet_clus_pt)
   part_e_log: np.log(fjet_clus_E)
   part_logptrel: np.log(fjet_clus_pt/jet_pt)
   part_logerel: np.log(fjet_clus_E/jet_pt)
   part_deltaR: np.hypot(fjet_clus_eta, fjet_clus_phi)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 128
      pad_mode: wrap
      vars: 
         - [fjet_clus_eta, null]
         - [fjet_clus_phi, null]
   pf_features:
      length: 128
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [part_pt_log, 1.7, 0.7]
         - [part_e_log, 2.0, 0.7]
         - [part_logptrel, -4.7, 0.7]
         - [part_logerel, -4.7, 0.7]
         - [part_deltaR, 0.2, 4.0]
         - [fjet_clus_eta, null]
         - [fjet_clus_phi, null]
   pf_vectors:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
         - [fjet_clus_E, null]
   pf_mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_QCD, label_sig]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

observers:
   #- jet_pt
   #- jet_eta
   #- jet_phi
   #- jet_energy
   #- jet_nparticles
   #- jet_sdmass
   #- jet_tau1
   #- jet_tau3
   #- jet_tau2
   #- jet_tau4

weights:
